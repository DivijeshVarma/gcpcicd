steps:
# Build the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest', '.']
# Push the container image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
# --- Consolidated Security and Deployment Step ---
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Checking for critical vulnerabilities..."
      # Use `gcloud` to list vulnerabilities with a filter.
      # If any are found, the `VULNERABILITIES` variable will not be empty.
      VULNERABILITIES=$(gcloud artifacts docker images list-vulnerabilities \
        asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest \
        --format='value(vulnerability.severity)' \
        --filter='vulnerability.severity>CRITICAL' \
        --project='divijesh-project')
      
      # Check if the variable is non-empty.
      if [[ -n "$VULNERABILITIES" ]]; then
        echo "ERROR: Found critical vulnerabilities. Deployment blocked."
        exit 1  # Exit with a non-zero code to fail the build.
      else
        echo "No critical vulnerabilities found. Proceeding with Cloud Deploy."
        # If no vulnerabilities, trigger the deployment from the same script.
        gcloud deploy releases create "release-$COMMIT_SHA" \
          --delivery-pipeline="demo" \
          --region="asia-south1" \
          --images="app=asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest"
      fi

options:
  logging: CLOUD_LOGGING_ONLY
