steps:
# Build the container images
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest', '.']
  id: 'build-app1'

# Scan the container image for vulnerabilities and fail if critical or high severity issues are found
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'gcloud container on-demand-scanning scan --uri=asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest --severity="CRITICAL|HIGH"']
  id: 'scan-app1'
  waitFor: ['build-app1']

# Push the container image to Artifact Registry ONLY IF the scan succeeds
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
  waitFor: ['scan-app1']

# Trigger the Cloud Deploy delivery pipeline ONLY IF the push succeeds
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'gcloud deploy releases create release-$(date +%Y%m%d%H%M%S) --delivery-pipeline demo --region asia-south1 --images app=asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
  waitFor: ['scan-app1']

options:
  logging: CLOUD_LOGGING_ONLY
