steps:
# Build the container images
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest', '.']
# Push the container image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
# --- NEW SECURITY STEP ---
# Check for vulnerabilities and fail if critical ones exist
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Check for critical vulnerabilities on the image
      VULNERABILITIES=$(gcloud artifacts docker images list-vulnerabilities \
        asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest \
        --format='value(vulnerability.severity)' \
        --filter='vulnerability.severity>CRITICAL' \
        --project='divijesh-project')
      if [[ -n "$VULNERABILITIES" ]]; then
        echo "Found critical vulnerabilities. Deployment blocked."
        exit 1
      else
        echo "No critical vulnerabilities found. Proceeding with deployment."
      fi
# Trigger the Cloud Deploy delivery pipeline
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'gcloud deploy releases create release-$(date +%Y%m%d%H%M%S) --delivery-pipeline demo --region asia-south1 --images app=asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest'] 

# Logging 2 
options:
  logging: CLOUD_LOGGING_ONLY
