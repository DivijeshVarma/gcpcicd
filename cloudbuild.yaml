steps:
# Build the container images
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest', '.']
  id: 'build-app1'

# Scan the container image for vulnerabilities and fail if critical severity issues are found
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  id: 'scan-app1'
  waitFor: ['build-app1']
  args:
    - '-c'
    - |
      IMAGE_URI="asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest"

      # Trigger an on-demand scan and capture the operation ID
      SCAN_OPERATION=$(gcloud artifacts docker images scan "${IMAGE_URI}" --format="value(name)")

      echo "Waiting for scan operation: ${SCAN_OPERATION} to complete..."

      # Wait for the scan to finish
      gcloud artifacts docker images scan describe "${SCAN_OPERATION}" --wait

      echo "Scan complete. Checking for critical vulnerabilities."

      # Get the vulnerability findings in JSON format and check for CRITICAL severity
      CRITICAL_VULNS=$(gcloud artifacts docker images scan findings "${SCAN_OPERATION}" --format=json | jq '[.[] | select(.vulnerability.severity == "CRITICAL")]')

      # Check if the number of critical vulnerabilities is greater than 0
      if [ "$(echo "$CRITICAL_VULNS" | jq length)" -gt 0 ]; then
        echo "Found CRITICAL vulnerabilities. Build failed."
        echo "Vulnerabilities found:"
        echo "$CRITICAL_VULNS" | jq
        exit 1
      else
        echo "No critical vulnerabilities found. Scan passed."
      fi
# Push the container image to Artifact Registry ONLY IF the scan succeeds
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
  waitFor: ['scan-app1']

# Trigger the Cloud Deploy delivery pipeline ONLY IF the push succeeds
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'gcloud deploy releases create release-$(date +%Y%m%d%H%M%S) --delivery-pipeline demo --region asia-south1 --images app=asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest']
  waitFor: ['scan-app1']

options:
  logging: CLOUD_LOGGING_ONLY
