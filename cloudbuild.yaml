steps:
# Build the container image.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '${_IMAGE_URI}', '.']
  id: 'build-app1'

# Scan the image for critical vulnerabilities.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  id: 'scan-app1'
  waitFor: ['build-app1']
  args:
    - '-c'
    - |
      IMAGE_URI="${_IMAGE_URI}"
      SCAN_OPERATION=$(gcloud artifacts docker images scan "${IMAGE_URI}" --format="value(name)")
      gcloud artifacts docker images scan describe "${SCAN_OPERATION}" --wait
      CRITICAL_VULNS=$(gcloud artifacts docker images scan findings "${SCAN_OPERATION}" --format=json | jq '[.[] | select(.vulnerability.severity == "CRITICAL")]')
      if [ "$(echo "$CRITICAL_VULNS" | jq length)" -gt 0 ]; then
        echo "Found CRITICAL vulnerabilities. Build failed."
        exit 1
      else
        echo "No critical vulnerabilities found. Scan passed."
      fi

# Push the container image to Artifact Registry ONLY IF the scan succeeds.
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_IMAGE_URI}']
  waitFor: ['scan-app1']

# Trigger the Cloud Deploy delivery pipeline ONLY IF the push succeeds.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'gcloud deploy releases create release-$(date +%Y%m%d%H%M%S) --delivery-pipeline demo --region asia-south1 --images app=${_IMAGE_URI}']
  waitFor: ['scan-app1']

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _IMAGE_URI: asia-south1-docker.pkg.dev/divijesh-project/pipeline/app1-image:latest
